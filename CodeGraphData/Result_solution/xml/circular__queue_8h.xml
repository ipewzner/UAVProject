<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="circular__queue_8h" kind="file">
    <compoundname>circular_queue.h</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">memory</includes>
    <includes local="no">algorithm</includes>
    <includes refid="_delegate_8h" local="yes">Delegate.h</includes>
    <includedby refid="_software_serial_8h" local="yes">C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/SoftwareSerial.h</includedby>
    <includedby refid="circular__queue__mp_8h" local="yes">C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/circular_queue/circular_queue_mp.h</includedby>
    <incdepgraph>
      <node id="29">
        <label>atomic</label>
      </node>
      <node id="34">
        <label>functional</label>
      </node>
      <node id="33">
        <label>esp_attr.h</label>
      </node>
      <node id="28">
        <label>Arduino.h</label>
      </node>
      <node id="35">
        <label>cstddef</label>
      </node>
      <node id="31">
        <label>algorithm</label>
      </node>
      <node id="32">
        <label>Delegate.h</label>
        <link refid="_delegate_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>memory</label>
      </node>
      <node id="27">
        <label>C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/circular_queue/circular_queue.h</label>
        <link refid="circular_queue.h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="41">
        <label>C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/circular_queue/circular_queue_mp.h</label>
        <link refid="circular__queue__mp_8h"/>
      </node>
      <node id="37">
        <label>C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/SoftwareSerial.h</label>
        <link refid="_software_serial_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>C:/Users/ipewz/Desktop/UAVProject/UAVProject/Lora.h</label>
        <link refid="_lora_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>C:/Users/ipewz/Desktop/UAVProject/UAVProject/Lora.cpp</label>
        <link refid="_lora_8cpp"/>
      </node>
      <node id="40">
        <label>C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/SoftwareSerial.cpp</label>
        <link refid="_software_serial_8cpp"/>
      </node>
      <node id="36">
        <label>C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/circular_queue/circular_queue.h</label>
        <link refid="circular_queue.h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classcircular__queue" prot="public">circular_queue</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">circular_queue.h<sp/>-<sp/>Implementation<sp/>of<sp/>a<sp/>lock-free<sp/>circular<sp/>queue<sp/>for<sp/>EspSoftwareSerial.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Dirk<sp/>O.<sp/>Kaar.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="6"><highlight class="comment">modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="7"><highlight class="comment">License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="8"><highlight class="comment">version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="13"><highlight class="comment">Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="16"><highlight class="comment">License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment">Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>St,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__circular_queue_h</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__circular_queue_h</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARDUINO</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_delegate_8h" kindref="compound">Delegate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::min;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ghostl_8h" kindref="compound">ghostl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ESP32)<sp/>&amp;&amp;<sp/>!defined(ESP8266)</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IRAM_ATTR</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>&gt;</highlight></codeline>
<codeline lineno="47" refid="classcircular__queue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcircular__queue" kindref="compound">circular_queue</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="classcircular__queue_1ab4f5704abe6d2fe7fe94b50f39452430" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab4f5704abe6d2fe7fe94b50f39452430" kindref="member">circular_queue</ref>()<sp/>:<sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>(1)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61" refid="classcircular__queue_1a6bdf11a16a5c6acc0bbd324bf9c72ae4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1a6bdf11a16a5c6acc0bbd324bf9c72ae4" kindref="member">circular_queue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a037616d4044ab603b335af80233337ac" kindref="member">capacity</ref>)<sp/>:<sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>(capacity<sp/>+<sp/>1),<sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>(new<sp/>T[<ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>])</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66" refid="classcircular__queue_1a996c2963ff26f135a9ef9d39e84f2de5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1a996c2963ff26f135a9ef9d39e84f2de5" kindref="member">circular_queue</ref>(<ref refid="classcircular__queue" kindref="compound">circular_queue</ref>&amp;&amp;<sp/>cq)<sp/>:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>(cq.<ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>),<sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>(cq.<ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>),<sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>(cq.<ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.load()),<sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>(cq.<ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.load())</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="69" refid="classcircular__queue_1a37c0a147a61b860f6363f8d1936bfdbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1a37c0a147a61b860f6363f8d1936bfdbd" kindref="member">~circular_queue</ref>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>.reset();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab4f5704abe6d2fe7fe94b50f39452430" kindref="member">circular_queue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue" kindref="compound">circular_queue</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74" refid="classcircular__queue_1a569283df73394877677e5d41d1bffb52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue" kindref="compound">circular_queue</ref>&amp;<sp/><ref refid="classcircular__queue_1a569283df73394877677e5d41d1bffb52" kindref="member">operator=</ref>(<ref refid="classcircular__queue" kindref="compound">circular_queue</ref>&amp;&amp;<sp/>cq)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref><sp/>=<sp/>cq.m_bufSize;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref><sp/>=<sp/>cq.m_buffer;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(cq.m_inPos.load());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(cq.m_outPos.load());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue" kindref="compound">circular_queue</ref>&amp;<sp/><ref refid="classcircular__queue_1a569283df73394877677e5d41d1bffb52" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue" kindref="compound">circular_queue</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classcircular__queue_1a037616d4044ab603b335af80233337ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a037616d4044ab603b335af80233337ac" kindref="member">capacity</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="87"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a037616d4044ab603b335af80233337ac" kindref="member">capacity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cap);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classcircular__queue_1a961986265ab3694a8d89af177b88ece1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a961986265ab3694a8d89af177b88ece1" kindref="member">flush</ref>()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(<ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classcircular__queue_1ab9d0457843bfc5bdcc61dd0eb693170b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1ab9d0457843bfc5bdcc61dd0eb693170b" kindref="member">available</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="112"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>()<sp/>-<sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail<sp/>&lt;<sp/>0)<sp/>avail<sp/>+=<sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avail;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classcircular__queue_1a8e2bf3c05ce90c21485ab0b93d830c08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a8e2bf3c05ce90c21485ab0b93d830c08" kindref="member">available_for_push</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="122"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>()<sp/>-<sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail<sp/>&lt;<sp/>0)<sp/>avail<sp/>+=<sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avail;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classcircular__queue_1ae07e1052629eee24e6e169c12cb69b86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classcircular__queue_1ae07e1052629eee24e6e169c12cb69b86" kindref="member">peek</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="134"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos<sp/>=<sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>[outPos];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classcircular__queue_1add28c28f9800b72678261eb6cb7bc21e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T&amp;<sp/>IRAM_ATTR<sp/><ref refid="classcircular__queue_1add28c28f9800b72678261eb6cb7bc21e" kindref="member">pushpeek</ref>()<sp/><ref refid="_8_u_a_v_project_8vsarduino_8h_1aa91ecb5e9664312d1f3d8f13b5ee97fb" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inPos<sp/>=<sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>[inPos];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classcircular__queue_1af5b15190c1f45f7c67b247cf852260c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/><ref refid="classcircular__queue_1af5b15190c1f45f7c67b247cf852260c1" kindref="member">push</ref>()<sp/><ref refid="_8_u_a_v_project_8vsarduino_8h_1aa91ecb5e9664312d1f3d8f13b5ee97fb" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inPos<sp/>=<sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>(inPos<sp/>+<sp/>1)<sp/>%<sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>(std::memory_order_relaxed))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(next,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classcircular__queue_1ab9f72980c5204145933c16b5c63bc22a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/><ref refid="classcircular__queue_1ab9f72980c5204145933c16b5c63bc22a" kindref="member">push</ref>(T&amp;&amp;<sp/>val)<sp/><ref refid="_8_u_a_v_project_8vsarduino_8h_1aa91ecb5e9664312d1f3d8f13b5ee97fb" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inPos<sp/>=<sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>(inPos<sp/>+<sp/>1)<sp/>%<sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>.<ref refid="classstd_1_1atomic_1a42b814248794e50dcfa7f7ed81dba19d" kindref="member">load</ref>(std::memory_order_relaxed))<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>[inPos]<sp/>=<sp/>std::move(val);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_release);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>.<ref refid="classstd_1_1atomic_1ac6187f3882863f0e3f65a7fbb8b04121" kindref="member">store</ref>(next,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classcircular__queue_1a8a3d33f046c7cb9c5ea68f991d6dfe0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/><ref refid="classcircular__queue_1a8a3d33f046c7cb9c5ea68f991d6dfe0a" kindref="member">push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/><ref refid="_8_u_a_v_project_8vsarduino_8h_1aa91ecb5e9664312d1f3d8f13b5ee97fb" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>v(val);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1af5b15190c1f45f7c67b247cf852260c1" kindref="member">push</ref>(std::move(v));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a08c00615e438bb04e0b5efe853044e43" kindref="member">push_n</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classcircular__queue_1a510912b13f5e9f7837ff3df10eea823b" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1aa2b3b67ab2b368efac7e343aa62d12ab" kindref="member">pop_n</ref>(T*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a25fdf3ebe3b875c39fcfe4b6a2bb02c9" kindref="member">for_each</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T&amp;&amp;),<sp/>ForEachArg&gt;&amp;<sp/>fun);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a25fdf3ebe3b875c39fcfe4b6a2bb02c9" kindref="member">for_each</ref>(<ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T&amp;&amp;),<sp/>ForEachArg&gt;<sp/>fun);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1aea5c8e9cde6ad67d0e77b1c5499d5d96" kindref="member">for_each_rev_requeue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(T&amp;),<sp/>ForEachArg&gt;&amp;<sp/>fun);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1aea5c8e9cde6ad67d0e77b1c5499d5d96" kindref="member">for_each_rev_requeue</ref>(<ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(T&amp;),<sp/>ForEachArg&gt;<sp/>fun);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254" refid="classcircular__queue_1a57960e33ab2087003c4112528f83d2e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classcircular__queue_1a57960e33ab2087003c4112528f83d2e4" kindref="member">defaultValue</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="255" refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1acf31ef42ec94255b2f40f7101c36ada4" kindref="member">m_bufSize</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="257" refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;T[]&gt;<sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;T&gt;<sp/><ref refid="classcircular__queue_1a9e73a870fce40fdee7841d09a3cd628f" kindref="member">m_buffer</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="261" refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1atomic" kindref="compound">std::atomic&lt;size_t&gt;</ref><sp/><ref refid="classcircular__queue_1ab1863bcdf48683a4a895089f03e2b1ce" kindref="member">m_inPos</ref>;</highlight></codeline>
<codeline lineno="262" refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1atomic" kindref="compound">std::atomic&lt;size_t&gt;</ref><sp/><ref refid="classcircular__queue_1afc6a18882d66d777b6c865da135d17eb" kindref="member">m_outPos</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>&gt;</highlight></codeline>
<codeline lineno="266" refid="classcircular__queue_1a531979fc9083dbd0d4e8a63a77fe35a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a037616d4044ab603b335af80233337ac" kindref="member">circular_queue&lt;T, ForEachArg&gt;::capacity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cap)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cap<sp/>+<sp/>1<sp/>==<sp/>m_bufSize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(available()<sp/>&gt;<sp/>cap)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;T[]<sp/>&gt;<sp/>buffer(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[cap<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>available<sp/>=<sp/>pop_n(buffer,<sp/>cap);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buffer.reset(buffer);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bufSize<sp/>=<sp/>cap<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_release);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>m_inPos.store(available,<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outPos.store(0,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>&gt;</highlight></codeline>
<codeline lineno="282" refid="classcircular__queue_1a08c00615e438bb04e0b5efe853044e43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a08c00615e438bb04e0b5efe853044e43" kindref="member">circular_queue&lt;T, ForEachArg&gt;::push_n</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inPos<sp/>=<sp/>m_inPos.load(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos<sp/>=<sp/>m_outPos.load(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blockSize<sp/>=<sp/>(outPos<sp/>&gt;<sp/>inPos)<sp/>?<sp/>outPos<sp/>-<sp/>1<sp/>-<sp/>inPos<sp/>:<sp/>(outPos<sp/>==<sp/>0)<sp/>?<sp/>m_bufSize<sp/>-<sp/>1<sp/>-<sp/>inPos<sp/>:<sp/>m_bufSize<sp/>-<sp/>inPos;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>blockSize<sp/>=<sp/>min(size,<sp/>blockSize);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blockSize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>(inPos<sp/>+<sp/>blockSize)<sp/>%<sp/>m_bufSize;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dest<sp/>=<sp/>m_buffer.get()<sp/>+<sp/>inPos;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_n(std::make_move_iterator(buffer),<sp/>blockSize,<sp/>dest);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>min(size<sp/>-<sp/>blockSize,<sp/>outPos<sp/>&gt;<sp/>1<sp/>?<sp/>static_cast&lt;size_t&gt;(outPos<sp/>-<sp/>next<sp/>-<sp/>1)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>m_buffer.get();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_n(std::make_move_iterator(buffer<sp/>+<sp/>blockSize),<sp/>size,<sp/>dest);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_release);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>m_inPos.store(next,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blockSize<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>&gt;</highlight></codeline>
<codeline lineno="309" refid="classcircular__queue_1a510912b13f5e9f7837ff3df10eea823b" refkind="member"><highlight class="normal">T<sp/><ref refid="classcircular__queue_1a510912b13f5e9f7837ff3df10eea823b" kindref="member">circular_queue&lt;T, ForEachArg&gt;::pop</ref>()</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos<sp/>=<sp/>m_outPos.load(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inPos.load(std::memory_order_relaxed)<sp/>==<sp/>outPos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>std::move(m_buffer[outPos]);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_release);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outPos.store((outPos<sp/>+<sp/>1)<sp/>%<sp/>m_bufSize,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>&gt;</highlight></codeline>
<codeline lineno="326" refid="classcircular__queue_1aa2b3b67ab2b368efac7e343aa62d12ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1aa2b3b67ab2b368efac7e343aa62d12ab" kindref="member">circular_queue&lt;T, ForEachArg&gt;::pop_n</ref>(T*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>size<sp/>=<sp/>min(size,<sp/>available());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!avail)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos<sp/>=<sp/>m_outPos.load(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>min(avail,<sp/>static_cast&lt;size_t&gt;(m_bufSize<sp/>-<sp/>outPos));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>std::copy_n(std::make_move_iterator(m_buffer.get()<sp/>+<sp/>outPos),<sp/>n,<sp/>buffer);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avail<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_n(std::make_move_iterator(m_buffer.get()),<sp/>avail,<sp/>buffer);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_release);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outPos.store((outPos<sp/>+<sp/>size)<sp/>%<sp/>m_bufSize,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>&gt;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="349" refid="classcircular__queue_1a25fdf3ebe3b875c39fcfe4b6a2bb02c9" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a25fdf3ebe3b875c39fcfe4b6a2bb02c9" kindref="member">circular_queue&lt;T, ForEachArg&gt;::for_each</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T&amp;&amp;),<sp/>ForEachArg&gt;&amp;<sp/>fun)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1a25fdf3ebe3b875c39fcfe4b6a2bb02c9" kindref="member">circular_queue&lt;T, ForEachArg&gt;::for_each</ref>(<ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T&amp;&amp;),<sp/>ForEachArg&gt;<sp/>fun)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos<sp/>=<sp/>m_outPos.load(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inPos<sp/>=<sp/>m_inPos.load(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(outPos<sp/>!=<sp/>inPos)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun(std::move(m_buffer[outPos]));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_release);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPos<sp/>=<sp/>(outPos<sp/>+<sp/>1)<sp/>%<sp/>m_bufSize;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_outPos.store(outPos,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ForEachArg<sp/>&gt;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)<sp/>||<sp/>defined(ESP32)<sp/>||<sp/>!defined(ARDUINO)</highlight></codeline>
<codeline lineno="368" refid="classcircular__queue_1aea5c8e9cde6ad67d0e77b1c5499d5d96" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1aea5c8e9cde6ad67d0e77b1c5499d5d96" kindref="member">circular_queue&lt;T, ForEachArg&gt;::for_each_rev_requeue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(T&amp;),<sp/>ForEachArg&gt;&amp;<sp/>fun)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcircular__queue_1aea5c8e9cde6ad67d0e77b1c5499d5d96" kindref="member">circular_queue&lt;T, ForEachArg&gt;::for_each_rev_requeue</ref>(<ref refid="class_delegate" kindref="compound">Delegate</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(T&amp;),<sp/>ForEachArg&gt;<sp/>fun)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inPos0<sp/>=<sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_inPos</ref>.load(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos<sp/>=<sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_outPos</ref>.load(std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_acquire);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outPos<sp/>==<sp/>inPos0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>inPos0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outPos1<sp/>=<sp/>inPos0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>posDecr<sp/>=<sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_bufSize</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>(pos<sp/>+<sp/>posDecr)<sp/>%<sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_bufSize</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;&amp;<sp/>val<sp/>=<sp/>std::move(<ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_buffer</ref>[pos]);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fun(val))</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPos1<sp/>=<sp/>(outPos1<sp/>+<sp/>posDecr)<sp/>%<sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_bufSize</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outPos1<sp/>!=<sp/>pos)<sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_buffer</ref>[outPos1]<sp/>=<sp/>std::move(val);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>outPos);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcircular__queue" kindref="compound">circular_queue&lt;T, ForEachArg&gt;::m_outPos</ref>.store(outPos1,<sp/>std::memory_order_release);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__circular_queue_h</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ipewz/Desktop/UAVProject/Libraries/espsoftwareserial-main/6.14.1/espsoftwareserial-main/src/circular_queue/circular_queue.h"/>
  </compounddef>
</doxygen>
